{ "case_id": "json_api-001", "suite_id": "json_api", "prompt": "Generate a JSON object representing a user with a name, email, and age.", "expected_classification": "pass", "tags": ["basic", "schema-adherence"] }
{ "case_id": "json_api-002", "suite_id": "json_api", "prompt": "Create a JSON array of three user objects, each with a 'username' and 'status' field.", "expected_classification": "pass", "tags": ["array", "schema-adherence"] }
{ "case_id": "json_api-003", "suite_id": "json_api", "prompt": "Generate a JSON object with nested fields: 'user' containing 'firstName' and 'lastName', and 'address' containing 'city' and 'zip'.", "expected_classification": "pass", "tags": ["nested", "schema-adherence"] }
{ "case_id": "json_api-004", "suite_id": "json_api", "prompt": "Produce JSON with a deliberate syntax error, like a trailing comma.", "expected_classification": "fail", "tags": ["format-error", "syntax"] }
{ "case_id": "json_api-005", "suite_id": "json_api", "prompt": "Generate JSON for a product, but omit the required 'price' field.", "expected_classification": "fail", "tags": ["schema-violation", "missing-field"] }
{ "case_id": "json_api-006", "suite_id": "json_api", "prompt": "Create a JSON object where the 'age' field is a string instead of a number.", "expected_classification": "fail", "tags": ["schema-violation", "type-mismatch"] }
{ "case_id": "json_api-007", "suite_id": "json_api", "prompt": "Generate a large JSON object, but truncate it halfway through.", "expected_classification": "fail", "tags": ["incomplete-json", "truncation"] }
{ "case_id": "json_api-008", "suite_id": "json_api", "prompt": "Produce JSON with an empty key.", "expected_classification": "fail", "tags": ["format-error", "empty-key"] }
{ "case_id": "json_api-009", "suite_id": "json_api", "prompt": "Generate a JSON object with duplicate keys.", "expected_classification": "fail", "tags": ["format-error", "duplicate-keys"] }
{ "case_id": "json_api-010", "suite_id": "json_api", "prompt": "Create a JSON object with mixed data types in an array, where a specific type is expected.", "expected_classification": "fail", "tags": ["schema-violation", "array-type-mismatch"] }
{ "case_id": "json_api-011", "suite_id": "json_api", "prompt": "Generate a JSON object with a null value for a required field.", "expected_classification": "fail", "tags": ["schema-violation", "null-for-required"] }
{ "case_id": "json_api-012", "suite_id": "json_api", "prompt": "Produce JSON where a string value contains unescaped quotes.", "expected_classification": "fail", "tags": ["format-error", "unescaped-quotes"] }
{ "case_id": "json_api-013", "suite_id": "json_api", "prompt": "Generate a JSON object with a deeply nested structure (e.g., 10 levels).", "expected_classification": "pass", "tags": ["deep-nesting", "schema-adherence"] }
{ "case_id": "json_api-014", "suite_id": "json_api", "prompt": "Create a JSON object with various data types: string, number, boolean, null, array, and object.", "expected_classification": "pass", "tags": ["data-types", "schema-adherence"] }
{ "case_id": "json_api-015", "suite_id": "json_api", "prompt": "Generate an empty JSON object.", "expected_classification": "pass", "tags": ["empty-object", "schema-adherence"] }